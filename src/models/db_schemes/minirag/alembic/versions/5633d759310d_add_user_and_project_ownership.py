"""Add user and project ownership

Revision ID: 5633d759310d
Revises: f4c6edd1f9a9
Create Date: 2025-06-24 14:35:01.977832

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5633d759310d'
down_revision: Union[str, None] = 'f4c6edd1f9a9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.drop_table('pgdata_proj1_asset3_sheet2')
    op.drop_table('pgdata_proj1_asset3_sheet_2022')
    op.drop_table('pgdata_proj1_asset3_sheet3')
    op.drop_table('collection_384_1')
    op.create_unique_constraint(None, 'chat_histories', ['chat_uuid'])
    op.add_column('projects', sa.Column('owner_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'projects', 'users', ['owner_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'projects', type_='foreignkey')
    op.drop_column('projects', 'owner_id')
    op.drop_constraint(None, 'chat_histories', type_='unique')
    op.create_table('collection_384_1',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('vector', sa.NullType(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('chunk_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['chunk_id'], ['chunks.chunk_id'], name='collection_384_1_chunk_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='collection_384_1_pkey')
    )
    op.create_table('pgdata_proj1_asset3_sheet3',
    sa.Column('pg_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('county_', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lpt_retained_locally_80', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('equalisation_fund', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('discretionary_lpt', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__revenue_budget_', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_lpt_revenue_budget_', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__capital_budget', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('total_lpt_allocation', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pg_id', name='pgdata_proj1_asset3_sheet3_pkey')
    )
    op.create_table('pgdata_proj1_asset3_sheet_2022',
    sa.Column('pg_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('county_', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lpt_100', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_retained_locally_80', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('equalisation_fund', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discretionary_lpt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__revenue_budget_', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_lpt_revenue_budget_', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__capital_budget', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_lpt_allocation', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pg_id', name='pgdata_proj1_asset3_sheet_2022_pkey')
    )
    op.create_table('pgdata_proj1_asset3_sheet2',
    sa.Column('pg_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('county_', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('lpt_100', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_retained_locally_80', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('equalisation_fund', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('discretionary_lpt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__revenue_budget_', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_lpt_revenue_budget_', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lpt_self_funding__capital_budget', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('total_lpt_allocation', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('pg_id', name='pgdata_proj1_asset3_sheet2_pkey')
    )
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
